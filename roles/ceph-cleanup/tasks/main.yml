---
# Stop all non-essential Ceph services
- name: Stop all Ceph services except 'mgr', 'mon', and 'osd'
  ansible.builtin.shell: |
    bash -c 'sudo ceph orch ls --format=json | jq -r ".[].service_name" | while read service; do if [[ "$service" != "mgr" && "$service" != "mon" && "$service" != "osd" ]]; then echo "Stopping $service..."; sudo ceph orch stop $service; else echo "Skipping $service (cannot be stopped directly)."; fi; done'
  changed_when: false

# Remove OSDs and clean up LVM
- name: Remove OSDs and cleanup LVM
  block:
    - name: Removing OSDs and cleaning up LVM volumes
      ansible.builtin.shell: |
        osd_ids=$(sudo ceph osd ls)
        for osd_id in $osd_ids; do
          echo "Removing OSD.$osd_id..."
          sudo ceph orch daemon rm osd.$osd_id --force
          sudo ceph osd crush remove osd.$osd_id
          sudo ceph osd purge $osd_id --yes-i-really-mean-it
        done
      changed_when: false

    - name: Cleanup LVM volumes on OSD hosts
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no -i {{ ssh_key_private }} {{ ssh_user }}@{{ item }} '
          lv_paths=$(sudo lvscan | awk "/ceph/ {gsub(/[\047]/, \"\", \$2); print \$2}")
          for lv in $lv_paths; do
            if [ -n "$lv" ]; then sudo lvremove -y "$lv"; fi
          done

          vg_names=$(sudo vgscan | awk "/ceph/ {gsub(/[\042]/, \"\", \$4); print \$4}")
          for vg in $vg_names; do
            if [ -n "$vg" ]; then sudo vgremove -y "$vg"; fi
          done

          pv_paths=$(sudo pvscan | grep "/dev/sd" | awk "{gsub(/[\042]/, \"\", \$2); print \$2}")
          for pv in $pv_paths; do
            vg=$(sudo pvdisplay "$pv" | grep "VG Name" | awk "{print \$3}")
            if [ -n "$vg" ]; then
              sudo vgreduce "$vg" "$pv" || true
              sudo pvremove -y "$pv"
            fi
          done
        '
      changed_when: false
      loop: "{{ groups['osds'] }}"
      loop_control:
        loop_var: item

# Cleanup existing Ceph cluster
- name: Cleanup existing Ceph cluster
  block:
    - name: Proceed with cluster cleanup
      ansible.builtin.shell: |
        if sudo test -d /var/lib/ceph; then
          echo "Cleaning up existing Ceph cluster..."
          fsid=$(sudo ceph fsid)
          if [ -n "$fsid" ]; then
            sudo cephadm rm-cluster --fsid=$fsid --force
            echo "Ceph cluster removed successfully."
          else
            echo "Failed to obtain Ceph FSID. Exiting."
            exit 1
          fi
        else
          echo "No existing Ceph cluster found to clean up."
        fi
      changed_when: false

    - name: Removing any leftover Ceph containers
      ansible.builtin.shell: |
        echo "Cleaning up containers on {{ item }}..."
        ssh "{{ ssh_user }}@{{ item }}" '
        if command -v docker &> /dev/null; then
          container_runtime="docker"
        elif command -v podman &> /dev/null; then
          container_runtime="podman"
        else
          echo "No container runtime (Docker or Podman) found. Skipping container cleanup."
          exit 1
        fi
        sudo $container_runtime ps -a --format "{{.Names}}" | grep ceph | while read container_name; do sudo $container_runtime rm -f "$container_name"; done
        '
        if [ $? -ne 0 ]; then
          echo "Error cleaning up containers on {{ item }}"
        else
          echo "Leftover Ceph containers removed successfully on {{ item }}."
        fi
      changed_when: false
      loop: "{{ groups['clients'] }}"
      loop_control:
        loop_var: item
